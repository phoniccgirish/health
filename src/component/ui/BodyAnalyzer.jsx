import React, { useState } from "react";
import axios from "axios";
import PopupModal from "../PopupModal";

// This component is now a form that collects real user data.
const BodyAnalyzer = () => {
  // State for all our form inputs
  const [age, setAge] = useState("");
  const [weight, setWeight] = useState("");
  const [height, setHeight] = useState("");
  const [gender, setGender] = useState("Male");
  const [goal, setGoal] = useState("Fat Loss");

  const [isLoading, setIsLoading] = useState(false);
  const [analysisResult, setAnalysisResult] = useState(null); // This will hold our AI plan
  const [errorPopup, setErrorPopup] = useState({ visible: false, message: "" });

  const handleGeneratePlan = async (e) => {
    e.preventDefault(); // Stop the form from submitting normally

    if (!age || !weight || !height) {
      setErrorPopup({ visible: true, message: "Please fill out all fields." });
      return;
    }

    setIsLoading(true);
    setAnalysisResult(null);
    setErrorPopup({ visible: false });

    // This is the REAL user data payload we send to the backend
    const payload = {
      age: parseInt(age),
      weight: parseFloat(weight),
      height: parseFloat(height),
      gender: gender,
      goal: goal,
    };

    try {
      // Call the NEW backend endpoint with our JSON payload
      const response = await axios.post(
        "http://localhost:8000/generate-plan/", // <-- This is our new URL
        payload // <-- This is our real JSON data, not FormData
      );

      // --- THIS IS THE FIX ---
      // The backend now sends a perfect JSON object.
      // Axios parses it automatically, so response.data IS the object.
      // We no longer need JSON.parse().

      // --- ADD THIS LINE ---
      console.log("AI RESPONSE:", response.data);

      setAnalysisResult(response.data); // SAVE THE AI PLAN TO OUR STATE
    } catch (error) {
      console.error("Failed to generate plan:", error);
      const errorMsg =
        error.response?.data?.detail || "An error occurred during analysis.";
      setErrorPopup({ visible: true, message: errorMsg });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className='w-full max-w-2xl p-6 bg-gray-800 rounded-lg shadow-xl'>
      <form onSubmit={handleGeneratePlan} className='flex flex-col space-y-4'>
        <p className='text-center text-gray-300'>
          Enter your data to receive a truly personalized diet and workout plan
          generated by our AI.
        </p>

        {/* --- Form Inputs --- */}
        <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
          <div>
            <label className='block text-sm font-medium text-gray-300'>
              Age
            </label>
            <input
              type='number'
              value={age}
              onChange={(e) => setAge(e.target.value)}
              className='mt-1 block w-full p-2 bg-gray-700 border border-gray-600 rounded text-white'
              placeholder='e.g., 25'
            />
          </div>
          <div>
            <label className='block text-sm font-medium text-gray-300'>
              Gender
            </label>
            <select
              value={gender}
              onChange={(e) => setGender(e.target.value)}
              className='mt-1 block w-full p-2 bg-gray-700 border border-gray-600 rounded text-white'
            >
              <option>Male</option>
              <option>Female</option>
            </select>
          </div>
          <div>
            <label className='block text-sm font-medium text-gray-300'>
              Weight (kg)
            </label>
            <input
              type='number'
              step='0.1'
              value={weight}
              onChange={(e) => setWeight(e.target.value)}
              className='mt-1 block w-full p-2 bg-gray-700 border border-gray-600 rounded text-white'
              placeholder='e.g., 80.5'
            />
          </div>
          <div>
            <label className='block text-sm font-medium text-gray-300'>
              Height (cm)
            </label>
            <input
              type='number'
              value={height}
              onChange={(e) => setHeight(e.target.value)}
              className='mt-1 block w-full p-2 bg-gray-700 border border-gray-600 rounded text-white'
              placeholder='e.g., 180'
            />
          </div>
        </div>

        <div>
          <label className='block text-sm font-medium text-gray-300'>
            Primary Goal
          </label>
          <select
            value={goal}
            onChange={(e) => setGoal(e.target.value)}
            className='mt-1 block w-full p-2 bg-gray-700 border border-gray-600 rounded text-white'
          >
            <option>Fat Loss</option>
            <option>Muscle Gain</option>
            <option>General Fitness</option>
          </select>
        </div>

        <button
          type='submit'
          disabled={isLoading}
          className='w-full px-4 py-3 font-bold text-gray-900 bg-emerald-400 rounded-lg 
                     hover:bg-emerald-500 disabled:bg-gray-500 
                     disabled:cursor-not-allowed transition-colors duration-200'
        >
          {isLoading ? "Generating Your Custom Plan..." : "Get My Plan"}
        </button>
      </form>

      {/* --- ERROR POPUP --- */}
      {errorPopup.visible && (
        <PopupModal
          title='Validation Failed'
          message={errorPopup.message}
          onClose={() => setErrorPopup({ visible: false })}
        />
      )}

      {/* --- !! NEW UI FOR THE AI-GENERATED PLAN !! --- */}
      {analysisResult && (
        <div className='mt-12 w-full'>
          <h2 className='text-3xl font-bold text-center text-emerald-400'>
            Your Custom Plan
          </h2>
          <p className='text-center text-gray-400 mb-8'>
            Here is the personalized plan generated by our AI.
          </p>

          <div className='flex flex-col md:flex-row gap-6'>
            {/* Workout Plan Card */}
            <div className='flex-1 bg-gray-900 p-6 rounded-xl shadow-lg border border-gray-700'>
              <div className='flex items-center mb-4'>
                {/* Dumbbell SVG Icon */}
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  width='28'
                  height='28'
                  viewBox='0 0 24 24'
                  fill='none'
                  stroke='currentColor'
                  strokeWidth='2'
                  strokeLinecap='round'
                  strokeLinejoin='round'
                  className='text-emerald-400 mr-3'
                >
                  <path d='M14.4 14.4 9.6 9.6M18 18l-1.4-1.4M6 6l-1.4-1.4M18 6l-1.4 1.4M6 18l-1.4-1.4M12 7a5 5 0 0 0-5 5M12 17a5 5 0 0 0 5-5M7 12a5 5 0 0 0 5 5M17 12a5 5 0 0 0-5-5'></path>
                </svg>
                <h3 className='text-2xl font-semibold text-white'>
                  Workout Plan
                </h3>
              </div>
              <p className='text-gray-300 whitespace-pre-wrap leading-relaxed font-sans'>
                {analysisResult.workout_plan}
              </p>
            </div>

            {/* Diet Plan Card */}
            <div className='flex-1 bg-gray-900 p-6 rounded-xl shadow-lg border border-gray-700'>
              <div className='flex items-center mb-4'>
                {/* Apple SVG Icon */}
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  width='28'
                  height='28'
                  viewBox='0 0 24 24'
                  fill='none'
                  stroke='currentColor'
                  strokeWidth='2'
                  strokeLinecap='round'
                  strokeLinejoin='round'
                  className='text-emerald-400 mr-3'
                >
                  <path d='M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17.5 6c-1.5 0-2.75 1.06-4 1.06C8 7.06 5 15.08 5 19.3c0 1.63 1.2 3.64 3.5 3.64A3.91 3.91 0 0 0 12 20.94Z'></path>
                  <path d='M12 10a3 3 0 0 0-3-3 3 3 0 0 0-3 3'></path>
                </svg>
                <h3 className='text-2xl font-semibold text-white'>Diet Plan</h3>
              </div>
              <p className='text-gray-300 whitespace-pre-wrap leading-relaxed font-sans'>
                {analysisResult.diet_plan}
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BodyAnalyzer;
